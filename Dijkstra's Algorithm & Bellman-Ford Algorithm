import java.util.*;
import (link unavailable)*;

public class ShortestPath {
 static class Edge {
  int destination, weight;
  Edge(int destination, int weight) {
   this.destination = destination;
   this.weight = weight;
  }
 }

 static class Graph {
  int numVertices;
  List<List<Edge>> adjList;

  Graph(int numVertices) {
   this.numVertices = numVertices;
   adjList = new ArrayList<>(numVertices);
   for (int i = 0; i < numVertices; i++)
    adjList.add(new ArrayList<>());
  }

  void addEdge(int source, int destination, int weight) {
   adjList.get(source).add(new Edge(destination, weight));
  }

  List<Integer> dijkstra(int source) {
   List<Integer> distances = new ArrayList<>(Collections.nCopies(numVertices, Integer.MAX_VALUE));
   distances.set(source, 0);
   PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
   pq.offer(new int[] { 0, source });
   while (!pq.isEmpty()) {
    int[] u = pq.poll();
    for (Edge edge : adjList.get(u[1])) {
     int v = edge.destination;
     int weight = edge.weight;
     if (distances.get(u[1]) + weight < distances.get(v)) {
      distances.set(v, distances.get(u[1]) + weight);
      pq.offer(new int[] { distances.get(v), v });
     }
    }
   }
   return distances;
  }
 }

 public static void main(String[] args) throws Exception {
  Graph graph = new Graph(6);
  graph.addEdge(0, 1, 2);
  graph.addEdge(0, 2, 4);
  graph.addEdge(1, 2, 1);
  graph.addEdge(1, 3, 2);
  graph.addEdge(2, 3, 3);
  graph.addEdge(3, 4, 2);
  graph.addEdge(3, 5, 1);
  graph.addEdge(4, 5, 1);

  List<Integer> distances = graph.dijkstra(0);

  System.out.println("Shortest distances from source node 0:");
  for (int i = 0; i < distances.size(); i++) {
   System.out.println("Node " + i + ": " + distances.get(i));
  }
 }
}
