#include <iostream>

using namespace std;

// Data structure to represent a node in the AVL Tree
struct Node {
 int key;
 Node* left;
 Node* right;
 int height;
};

// Function to create a new node
Node* newNode(int key) {
 Node* node = new Node();
 node->key = key;
 node->left = NULL;
 node->right = NULL;
 node->height = 1; // new node added at leaf
 return node;
}

// Function to insert a node into the AVL Tree
Node* insertNode(Node* root, int key) {
 // Insert the node using standard BST insertion
 if (root == NULL)
  return newNode(key);
 else if (key < root->key)
  root->left = insertNode(root->left, key);
 else if (key > root->key)
  root->right = insertNode(root->right, key);
 else
  return root; // Equal keys are not allowed in BST

 // Update the height of the ancestor nodes
 root->height = 1 + max(getHeight(root->left), getHeight(root->right));

 // Balance the tree if it becomes unbalanced
 int balance = getBalance(root);
 if (balance > 1 && key < root->left->key)
  return rightRotate(root);
 if (balance < -1 && key > root->right->key)
  return leftRotate(root);
 if (balance > 1 && key > root->left->key) {
  root->left = leftRotate(root->left);
  return rightRotate(root);
 }
 if (balance < -1 && key < root->right->key) {
  root->right = rightRotate(root->right);
  return leftRotate(root);
 }
 return root;
}

// Function to delete a node from the AVL Tree
Node* deleteNode(Node* root, int key) {
 // Find and delete the node using standard BST deletion
 if (root == NULL)
  return root;
 else if (key < root->key)
  root->left = deleteNode(root->left, key);
 else if (key > root->key)
  root->right = deleteNode(root->right, key);
 else {
  if ((root->left == NULL) || (root->right == NULL)) {
   Node* temp = root->left ? root->left : root->right;
   if (temp == NULL) {
    temp = root;
    root = NULL;
   } else
    *root = *temp;
   free(temp);
  } else {
   Node* temp = minValueNode(root->right);
   root->key = temp->key;
   root->right = deleteNode(root->right, temp->key);
  }
 }

 // Update the height of the ancestor nodes
 if (root == NULL)
  return root;
 root->height = 1 + max(getHeight(root->left), getHeight(root->right));

 // Balance the tree if it becomes unbalanced
 int balance = getBalance(root);
 if (balance > 1 && getBalance(root->left) >= 0)
  return rightRotate(root);
 if (balance > 1 && getBalance(root->left) < 0) {
  root->left = leftRotate(root->left);
  return rightRotate(root);
 }
 if (balance < -1 && getBalance(root->right) <= 0)
  return leftRotate(root);
 if (balance < -1 && getBalance(root->right) > 0) {
  root->right = rightRotate(root->right);
  return leftRotate(root);
 }
 return root;
}

// Function to search for a node in the AVL Tree
Node* searchNode(Node* root, int key) {
 if (root == NULL || root->key == key)
  return root;
 else if (root->key < key)
  return searchNode(root->right, key);
 return searchNode(root->left, key);
}

// Function to display the tree (in-order traversal)
void displayTree(Node* root) {
 if (root != NULL) {
  displayTree(root->left);
  cout << root->key << " ";
  displayTree(root->right);
 }
}

// Helper functions to get the height and balance factor of a node
int getHeight(Node* node) {
 if (node == NULL)
  return 0;
 return node->height;
}

int getBalance(Node* node) {
 if (node == NULL)
  return 0;
 return getHeight(node->left) - getHeight(node->right);
}

// Helper functions to perform rotations
Node* leftRotate(Node* z) {
 Node* y = z->right;
 Node* T2 = y->left;
 y->left = z;
 z->right = T2;
 z->height = 1 + max(getHeight(z->left), getHeight(z->right));
 y->height = 1 + max(getHeight(y->left), getHeight(y->right));
 return y;
